import random
from sympy import isprime, mod_inverse

def generate_prime_candidate(length):
    """Generate an odd prime candidate of specified bit length."""
    p = random.getrandbits(length)
    # Ensure p is odd
    p |= (1 << length - 1) | 1
    return p

def generate_prime_number(length):
    """Generate a prime number of specified bit length."""
    p = 4  # Dummy value
    while not isprime(p):
        p = generate_prime_candidate(length)
    return p

def generate_keypair(bits):
    """Generate RSA keypair."""
    # Step 1: Generate two distinct prime numbers
    p = generate_prime_number(bits)
    q = generate_prime_number(bits)
    while p == q:
        q = generate_prime_number(bits)

    # Step 2: Compute n = p * q
    n = p * q

    # Step 3: Compute the totient (Ï†(n))
    phi = (p - 1) * (q - 1)

    # Step 4: Choose e
    e = 65537  # Common choice for e

    # Step 5: Compute d
    d = mod_inverse(e, phi)

    return ((e, n), (d, n))  # Public and private keys

def encrypt(public_key, plaintext):
    """Encrypt the plaintext using the public key."""
    e, n = public_key
    # Convert plaintext to integer
    plaintext_int = int.from_bytes(plaintext.encode('utf-8'), 'big')
    # Encrypt using the formula: ciphertext = (plaintext^e) mod n
    ciphertext = pow(plaintext_int, e, n)
    return ciphertext

def decrypt(private_key, ciphertext):
    """Decrypt the ciphertext using the private key."""
    d, n = private_key
    # Decrypt using the formula: plaintext = (ciphertext^d) mod n
    plaintext_int = pow(ciphertext, d, n)
    # Convert integer back to plaintext
    plaintext = plaintext_int.to_bytes((plaintext_int.bit_length() + 7) // 8, 'big').decode('utf-8', errors='ignore')
    return plaintext

# Example usage
if __name__ == "__main__":
    bits = 16  # You can increase this for stronger security
    public_key, private_key = generate_keypair(bits)

    print("Public Key:", public_key)
    print("Private Key:", private_key)

    message = "HELLO RSA"
    print("Original Message:", message)

    # Encrypt the message
    ciphertext = encrypt(public_key, message)
    print("Encrypted Message (ciphertext):", ciphertext)

    # Decrypt the message
    decrypted_message = decrypt(private_key, ciphertext)
    print("Decrypted Message:", decrypted_message)
